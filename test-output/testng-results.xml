<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="6" passed="5">
  <reporter-output>
    <line>
      <![CDATA[<a href= '/Users/urveshpatel/git/Akkadu_E2E/screenshots/verifyToStreamingOnBroadcast2020-06-11-05-09-44.png'target='_blank' ><img src='/Users/urveshpatel/git/Akkadu_E2E/screenshots/verifyToStreamingOnBroadcast2020-06-11-05-09-44.png'>verifyToStreamingOnBroadcast2020-06-11-05-09-44</a>]]>
    </line>
  </reporter-output>
  <suite name="Suite" duration-ms="300285" started-at="2020-06-11T11:34:47Z" finished-at="2020-06-11T11:39:47Z">
    <groups>
    </groups>
    <test name="Akkadu application Smoke test" duration-ms="300285" started-at="2020-06-11T11:34:47Z" finished-at="2020-06-11T11:39:47Z">
      <class name="com.akkadu.qa.uitests.SmokeTest">
        <test-method status="PASS" signature="before()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="before" is-config="true" duration-ms="269" started-at="2020-06-11T17:04:46Z" finished-at="2020-06-11T17:04:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- before -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="8524" started-at="2020-06-11T17:04:47Z" finished-at="2020-06-11T17:04:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="458" started-at="2020-06-11T17:04:55Z" finished-at="2020-06-11T17:04:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="PASS" signature="loginToAkkaduAppTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="loginToAkkaduAppTest" duration-ms="30350" started-at="2020-06-11T17:04:56Z" description="To verify login on Akkadu application" finished-at="2020-06-11T17:05:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginToAkkaduAppTest -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="1115" started-at="2020-06-11T17:05:26Z" finished-at="2020-06-11T17:05:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginToAkkaduAppTest status=SUCCESS method=SmokeTest.loginToAkkaduAppTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="5525" started-at="2020-06-11T17:05:27Z" finished-at="2020-06-11T17:05:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="1" started-at="2020-06-11T17:05:33Z" finished-at="2020-06-11T17:05:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="PASS" signature="signUpToAkkaduAppTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="signUpToAkkaduAppTest" duration-ms="16739" started-at="2020-06-11T17:05:33Z" description="To verify signup on Akkadu application" finished-at="2020-06-11T17:05:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signUpToAkkaduAppTest -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="419" started-at="2020-06-11T17:05:49Z" finished-at="2020-06-11T17:05:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signUpToAkkaduAppTest status=SUCCESS method=SmokeTest.signUpToAkkaduAppTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="3531" started-at="2020-06-11T17:05:50Z" finished-at="2020-06-11T17:05:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="1" started-at="2020-06-11T17:05:53Z" finished-at="2020-06-11T17:05:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="PASS" signature="verifyToCreateEventTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="verifyToCreateEventTest" duration-ms="31931" started-at="2020-06-11T17:05:53Z" description="To verify create event" finished-at="2020-06-11T17:06:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToCreateEventTest -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="550" started-at="2020-06-11T17:06:25Z" finished-at="2020-06-11T17:06:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyToCreateEventTest status=SUCCESS method=SmokeTest.verifyToCreateEventTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="6237" started-at="2020-06-11T17:06:26Z" finished-at="2020-06-11T17:06:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="verifyToEditEventTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="verifyToEditEventTest" duration-ms="87418" started-at="2020-06-11T17:06:32Z" description="To verify edit event" finished-at="2020-06-11T17:07:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToEditEventTest -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="0" started-at="2020-06-11T17:06:32Z" finished-at="2020-06-11T17:06:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="481" started-at="2020-06-11T17:07:59Z" finished-at="2020-06-11T17:08:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyToEditEventTest status=SUCCESS method=SmokeTest.verifyToEditEventTest()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="6196" started-at="2020-06-11T17:08:00Z" finished-at="2020-06-11T17:08:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="verifyToManageSpeakersOnEvent()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="verifyToManageSpeakersOnEvent" duration-ms="40257" started-at="2020-06-11T17:08:06Z" description="To verify manage speaker" finished-at="2020-06-11T17:08:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToManageSpeakersOnEvent -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="0" started-at="2020-06-11T17:08:06Z" finished-at="2020-06-11T17:08:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="363" started-at="2020-06-11T17:08:46Z" finished-at="2020-06-11T17:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyToManageSpeakersOnEvent status=SUCCESS method=SmokeTest.verifyToManageSpeakersOnEvent()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="driversetup()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="driversetup" is-config="true" duration-ms="1513" started-at="2020-06-11T17:08:47Z" finished-at="2020-06-11T17:08:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- driversetup -->
        <test-method status="PASS" signature="initializePages()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="initializePages" is-config="true" duration-ms="0" started-at="2020-06-11T17:08:48Z" finished-at="2020-06-11T17:08:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializePages -->
        <test-method status="FAIL" signature="verifyToStreamingOnBroadcast()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="verifyToStreamingOnBroadcast" duration-ms="55633" started-at="2020-06-11T17:08:48Z" description="To verify Streaming" finished-at="2020-06-11T17:09:44Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//span[contains(text(),'Mute')]"}
  (Session info: chrome=83.0.4103.97)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'apple1.local', ip: '192.168.1.11', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.12.6', java.version: '1.8.0_251'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 83.0.4103.97, chrome: {chromedriverVersion: 83.0.4103.39 (ccbf011cb2d2b..., userDataDir: /var/folders/qy/_b96qbk167x...}, goog:chromeOptions: {debuggerAddress: localhost:52735}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}
Session ID: 0d406b382c92f131b911a832de0d14dd
*** Element info: {Using=xpath, value=//span[contains(text(),'Mute')]}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//span[contains(text(),'Mute')]"}
  (Session info: chrome=83.0.4103.97)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'apple1.local', ip: '192.168.1.11', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.12.6', java.version: '1.8.0_251'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 83.0.4103.97, chrome: {chromedriverVersion: 83.0.4103.39 (ccbf011cb2d2b..., userDataDir: /var/folders/qy/_b96qbk167x...}, goog:chromeOptions: {debuggerAddress: localhost:52735}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true}
Session ID: 0d406b382c92f131b911a832de0d14dd
*** Element info: {Using=xpath, value=//span[contains(text(),'Mute')]}
	at sun.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
	at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
	at com.akkadu.qa.base.BasePage.isElementPresent(BasePage.java:627)
	at com.akkadu.qa.pages.OrganizerBroadcastPage.verifyAndClickOnStartBttn(OrganizerBroadcastPage.java:67)
	at com.akkadu.qa.uitests.SmokeTest.verifyToStreamingOnBroadcast(SmokeTest.java:228)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToStreamingOnBroadcast -->
        <test-method status="PASS" signature="afterMainMethod(org.testng.ITestResult)[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="afterMainMethod" is-config="true" duration-ms="3006" started-at="2020-06-11T17:09:44Z" finished-at="2020-06-11T17:09:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyToStreamingOnBroadcast status=FAILURE method=SmokeTest.verifyToStreamingOnBroadcast()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href= '/Users/urveshpatel/git/Akkadu_E2E/screenshots/verifyToStreamingOnBroadcast2020-06-11-05-09-44.png'target='_blank' ><img src='/Users/urveshpatel/git/Akkadu_E2E/screenshots/verifyToStreamingOnBroadcast2020-06-11-05-09-44.png'>verifyToStreamingOnBroadcast2020-06-11-05-09-44</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- afterMainMethod -->
        <test-method status="PASS" signature="tearDownSuite()[pri:0, instance:com.akkadu.qa.uitests.SmokeTest@1a482e36]" name="tearDownSuite" is-config="true" duration-ms="87" started-at="2020-06-11T17:09:47Z" finished-at="2020-06-11T17:09:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownSuite -->
      </class> <!-- com.akkadu.qa.uitests.SmokeTest -->
    </test> <!-- Akkadu application Smoke test -->
  </suite> <!-- Suite -->
</testng-results>
